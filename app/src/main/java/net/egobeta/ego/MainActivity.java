//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-android v0.7
//
package net.egobeta.ego;

import android.app.Activity;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.content.res.Resources;

import android.graphics.Color;
import android.graphics.PorterDuff;
import android.graphics.RectF;
import android.graphics.Typeface;

import android.graphics.drawable.Drawable;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.content.LocalBroadcastManager;
import android.support.v4.util.SparseArrayCompat;
import android.support.v4.view.ViewPager;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.util.TypedValue;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AbsListView;



import net.amazonaws.mobile.AWSMobileClient;
import net.amazonaws.mobile.user.IdentityManager;
import net.astuetz.PagerSlidingTabStrip;
//import net.egobeta.ego.databinding.FragmentListBinding;
import net.egobeta.ego.Fragments.Fragment_Main;
import net.egobeta.ego.Fragments.Fragment_Main_Friends;
import net.egobeta.ego.Fragments.ScrollTabHolderFragment;
import net.egobeta.ego.Interfaces.ScrollTabHolder;
import net.egobeta.ego.Settings.SettingsActivity;
import net.egobeta.ego.Table_Classes.User_Badges;
import net.egobeta.ego.Table_Classes.User_Profile;
import net.flavienlaurent.notboringactionbar.AlphaForegroundColorSpan;

import com.amazonaws.AmazonClientException;
import com.amazonaws.mobileconnectors.cognito.Dataset;
import com.amazonaws.mobileconnectors.cognito.DefaultSyncCallback;
import com.amazonaws.mobileconnectors.cognito.Record;
import com.amazonaws.mobileconnectors.cognito.exceptions.DataStorageException;
import com.amazonaws.mobileconnectors.dynamodbv2.dynamodbmapper.DynamoDBMapper;
import com.facebook.AccessToken;
import com.facebook.GraphRequest;
import com.facebook.GraphResponse;
import com.jeremyfeinstein.slidingmenu.lib.SlidingMenu;
import com.viewpagerindicator.CirclePageIndicator;


import android.content.IntentFilter;
import android.content.BroadcastReceiver;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ScrollView;
import android.widget.TextView;
import android.widget.Toast;


import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

public class MainActivity extends AppCompatActivity implements ScrollTabHolder, ViewPager.OnPageChangeListener, View.OnClickListener {

    //AWS Variables
    static DynamoDBMapper mapper = null;
    public static IdentityManager identityManager = null; //The identity manager used to keep track of the current user account.


    //Other variables
    private final static String LOG_TAG = MainActivity.class.getSimpleName(); //Class name for log messages.
    Typeface typeface;
    private TypedValue mTypedValue = new TypedValue();
    private PagerAdapter mPagerAdapter = null; //The pager adapter, which provides the pages to the view pager widget.
    ScrollTabHolderFragment fragment = null;

    private Resources resources;
    Context context;
    private static AlphaForegroundColorSpan mAlphaForegroundColorSpan;
    static EgoMap egoMap = null;

    @Override
    protected void onDestroy() {
        super.onDestroy();
        Log.d("ACT DEBUG", "MainActivity: OnDestroy");
        egoMap = null;
        android.os.Process.killProcess(android.os.Process.myPid());
    }

//    static UserLocation userLocation = null;
    public static Activity activity = null;
//    static EgoStreamViewAdapter2 adapter;
    private static String facebookId;

    //Number Variables
    private static int mMinHeaderTranslation;
    private int mActionBarHeight;
    public int mMinHeaderHeight;
    private int mHeaderHeight;
    private static RectF mRect1 = new RectF();
    private static RectF mRect2 = new RectF();

    //View item variables
    private static View mHeader;
    private static ImageView home_menu_image;
    private static ImageView home_menu_image2;
    private ImageView mHeaderPicture;
    public Drawable upArrow;
    public static ImageView egoLogo;
    public static ScrollView scrollView;
    private SlidingMenu slidingMenu;
    private ViewPager mViewPager = null;
    private static Toolbar toolbar;
    public PagerSlidingTabStrip mPagerSlidingTabStrip;
    private static TextView toolbarTitle;
    private static AbsListView absListView;
    static CirclePageIndicator pageIndicator;

    static String[] facebookIds = {"699211431"};
    private static User_Badges userBadges;
    private static User_Profile userProfile;
    private GraphResponse response;
    ArrayList<String> friends_Ids = new ArrayList<String>(); //list to pass through to friends fragment
    boolean isCreated = false;



    @Override
    protected void onCreate(final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);


        System.out.println("MAINACTIVITY: onCreate");
        /** Set up and initialize aws variables **/
        initializeAWSVariables();

        /** Set Content View **/
        setContentView(R.layout.activity_main);

        /**Initialize facebookId, context, egoMap, resources, typeface, and dimension items*/
        setUpNeededVariables();

        /** Sync user permissions from server **/
        /** Chain ends at updateUI method which then initializes the pager adapter **/
        syncPrivacySettings();


    }

    private void initializeAWSVariables() {
        activity = this;

        // Obtain a reference to the mobile client. It is created in the Application class,
        // but in case a custom Application class is not used, we initialize it here if necessary.
        AWSMobileClient.initializeMobileClientIfNecessary(this);
        // Obtain a reference to the mobile client. It is created in the Application class.
        final AWSMobileClient awsMobileClient = AWSMobileClient.defaultMobileClient();
        // Obtain a reference to the identity manager.
        identityManager = awsMobileClient.getIdentityManager();

        //Initialize the mapper for DynamoDB
        mapper = AWSMobileClient.defaultMobileClient().getDynamoDBMapper();
    }

    private void setUpPageIndicator() {
        pageIndicator = (CirclePageIndicator)findViewById(R.id.titles);
        int tabPageColor = Color.parseColor("#5055C1AD");
        int tabFillColor = Color.parseColor("#55C1AD");
        pageIndicator.setStrokeColor(tabPageColor);
        pageIndicator.setFillColor(tabFillColor);
        pageIndicator.setPageColor(tabPageColor);
        pageIndicator.setExtraSpacing(15f);
        pageIndicator.setViewPager(mViewPager);
    }

    private void setUpToolBar() {
        toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        assert getSupportActionBar() != null;
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        toolbar.setOnClickListener(this);
    }

    private void setUpViewPager() {
        mViewPager = (ViewPager) findViewById(R.id.pager);
        mViewPager.setOffscreenPageLimit(3);
        mPagerAdapter = new PagerAdapter(getSupportFragmentManager());
        mPagerAdapter.setTabHolderScrollingContent(this);
        mViewPager.setAdapter(mPagerAdapter);
    }


    /** Sync user's preferences only if user is signed in **/
    private void syncPrivacySettings() {
        System.out.println("MAINACTIVITY: syncPrivacySettings");
        // sync only if user is signed in
        if (AWSMobileClient.defaultMobileClient().getIdentityManager().isUserSignedIn()) {
            final UserPermissions userPermissions = UserPermissions.getInstance(getApplicationContext());
            userPermissions.getDataset().synchronize(new DefaultSyncCallback() {
                @Override
                public void onSuccess(final Dataset dataset, final List<Record> updatedRecords) {
                    super.onSuccess(dataset, updatedRecords);
                    Log.d(LOG_TAG, "successfully synced user settings");

                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            loadUserSettings();
                        }
                    });
                }
            });
        }
    }

    /** userPermissions.loadFromDataset(); get called here **/
    private void loadUserSettings() {
        final UserPermissions userPermissions = UserPermissions.getInstance(getApplicationContext());
        final Dataset dataset = userPermissions.getDataset();
        final ProgressDialog dialog = ProgressDialog.show(this,
                getString(R.string.settings_fragment_dialog_title),
                getString(R.string.settings_fragment_dialog_message));
        Log.d(LOG_TAG, "Loading user settings from remote");
        dataset.synchronize(new DefaultSyncCallback() {
            @Override
            public void onSuccess(final Dataset dataset, final List<Record> updatedRecords) {
                super.onSuccess(dataset, updatedRecords);
                userPermissions.loadFromDataset();
                getFacebookInfo(userPermissions, dialog);

            }

            @Override
            public void onFailure(final DataStorageException dse) {
                Log.w(LOG_TAG, "Failed to load user settings from remote, using default.", dse);
                updateUI(dialog);
            }

            @Override
            public boolean onDatasetsMerged(final Dataset dataset,
                                            final List<String> datasetNames) {
                // Handle dataset merge. One can selectively copy records from merged datasets
                // if needed. Here, simply discard merged datasets
                for (String name : datasetNames) {
                    Log.d(LOG_TAG, "found merged datasets: " + name);
                    AWSMobileClient.defaultMobileClient().getSyncManager().openOrCreateDataset(name).delete();
                }
                return true;
            }
        });
    }

    /** Get the info from the facebook api**/
    private void getFacebookInfo(final UserPermissions userPermissions, final ProgressDialog dialog) {
        Thread thread = new Thread() {
            @Override
            public void run() {
                try {
                    if(true) {
                        sleep(1000);
                        final Bundle parameters = new Bundle();
                        parameters.putString("fields", "name,picture.type(large), age_range, birthday, context, " +
                                "education, email, favorite_athletes, favorite_teams, hometown, inspirational_people, is_verified, " +
                                "languages, locale, location, work, movies, music, books, friends");
                        final GraphRequest graphRequest = new GraphRequest(AccessToken.getCurrentAccessToken(), "me");
                        graphRequest.setParameters(parameters);
                        response = graphRequest.executeAndWait();
                        getBadgeVariablesFromResponse(response, userPermissions, dialog);
                    }
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        };
        thread.start();
    }

    /** Gets the variables set by the user's privacy preferences needed for the badge class **/
    public void getBadgeVariablesFromResponse(GraphResponse response, UserPermissions userPermissions, ProgressDialog dialog){
        userBadges = new User_Badges();

        //Get json object from response
        JSONObject json = response.getJSONObject();

        //Print json response for debugging purposes
//        printJsonResponse(json);

        //Parse json response into the corresponding variables
        try {
            userBadges.setFacebookId(facebookId);

            if(userPermissions.getFriends() == 1){
                //Need to set the badge variable to 1 so that the database can do a badge comparison on this badge
                userBadges.setFriend("1");
                // Get all friends from response and store in arraylist to pass through to ego friends fragment.
                //Create JSON array to store the friend items
                JSONArray friendArray = new JSONArray();

                //Get the items from the response JSONArray and add it to our custom json array
                JSONObject friendObject = json.getJSONObject("friends");
                JSONArray data = friendObject.getJSONArray("data");
                friends_Ids = new ArrayList<String>();
                for (int i = 0; i < data.length(); i++) {
                    JSONObject jsonobject = data.getJSONObject(i);
                    String friend_facebook_id = jsonobject.getString("id");

                    friends_Ids.add(friend_facebook_id);
                    System.out.println("MAINACTIVITY JSONPARSING: " + friend_facebook_id);
                }
            }

            if(userPermissions.getFriendsOfFriends() == 1){
                //Need to set the badge variable to 1 so that the database can do a badge comparison on this badge
                userBadges.setFriendsOfFriends("1");
            }

            if(userPermissions.getInstagramFollowers() == 1){
                //Need to set the badge variable to 1 so that the database can do a badge comparison on this badge
                userBadges.setInstagram_follower("1");
            }

            if(userPermissions.getInstagramFollowing() == 1){
                userBadges.setInstagram_following("1");
            }

            if(userPermissions.getLocation() == 1){
                JSONObject locationObject = json.getJSONObject("location");
                String location = locationObject.getString("name");
                userBadges.setLocation(location);
                System.out.println("MAINACTIVITY JSONPARSING: " + location);
            }

            if(userPermissions.getHometown() == 1){
                JSONObject hometownObject = json.getJSONObject("hometown");
                String hometown = hometownObject.getString("name");
                userBadges.setHometown(hometown);
                System.out.println("MAINACTIVITY JSONPARSING: " + hometown);
            }

            if(userPermissions.getCommonLikes() == 1){
                //Create JSON array to store the likes
                JSONArray likesArray = new JSONArray();

                //Get the items from the response JSONArray and add it to our custom json array
                JSONObject contextObject = json.getJSONObject("context");
                JSONObject mutualLikes = contextObject.getJSONObject("mutual_likes");
                JSONArray data = mutualLikes.getJSONArray("data");

                for (int i = 0; i < data.length(); i++) {
                    JSONObject jsonobject = data.getJSONObject(i);
                    String name = jsonobject.getString("name");

                    likesArray.put(name);
                }

                JSONObject likesObject = new JSONObject();
                likesObject.put("likes", likesArray);

                String likes_json = likesObject.toString();

                userBadges.setLikes_json(likes_json);
                System.out.println("MAINACTIVITY JSONPARSING: " + likes_json);
            }

            if(userPermissions.getBirthday() == 1){
                String birthday = json.getString("birthday");
                userBadges.setBirthday(birthday);
                System.out.println("MAINACTIVITY JSONPARSING: " + birthday);
            }

            if(userPermissions.getWorkplace() == 1){
                //Create JSON array to store the work items
                JSONArray workArray = new JSONArray();

                //Get the work array from the json response
                JSONArray data = json.getJSONArray("work");

                for (int i = 0; i < data.length(); i++) {
                    JSONObject workObject = data.getJSONObject(i);

                    //Get work position name
                    JSONObject positionObject = workObject.getJSONObject("position");
                    String position = positionObject.getString("name");

                    //Get work employer name
                    JSONObject employerObject = workObject.getJSONObject("employer");
                    String employer = employerObject.getString("name");

                    //Get work location name
                    JSONObject locationObject = workObject.getJSONObject("location");
                    String location = locationObject.getString("name");

                    JSONObject workItem = new JSONObject();
                    workItem.put("position", position);
                    workItem.put("employer", employer);
                    workItem.put("location", location);
                    workArray.put(workItem);
                }

                JSONObject workObject = new JSONObject();
                workObject.put("work", workArray);

                String workplace_json = workObject.toString();

                userBadges.setWorkplace_json(workplace_json);
                System.out.println("MAINACTIVITY JSONPARSING: " + workplace_json);
            }

            if(userPermissions.getSchool() == 1){
                //Create JSON array to store the school items
                JSONArray educationArray = new JSONArray();

                //Get the education array from the json response
                JSONArray data = json.getJSONArray("education");

                for (int i = 0; i < data.length(); i++) {
                    JSONObject educationObject = data.getJSONObject(i);

                    //Get school name
                    JSONObject schoolObject = educationObject.getJSONObject("school");
                    String school = schoolObject.getString("name");

                    educationArray.put(school);
                }

                JSONObject schoolsObject = new JSONObject();
                schoolsObject.put("schools", educationArray);

                String school_json = schoolsObject.toString();

                userBadges.setSchool_json(school_json);
                System.out.println("MAINACTIVITY JSONPARSING: " + school_json);
            }

            if(userPermissions.getSchool() == 1){
                //Create JSON array to store the skill items
                JSONArray skillsArray = new JSONArray();

                //Get the education array from the json response
                JSONArray data = json.getJSONArray("education");

                for (int i = 0; i < data.length(); i++) {
                    JSONObject educationObject = data.getJSONObject(i);

                    //Get skill name
                    JSONArray concentration = educationObject.getJSONArray("concentration");
                    for(int ii = 0; ii < concentration.length(); ii++){
                        JSONObject skillObject = concentration.getJSONObject(ii);
                        String skill = skillObject.getString("name");

                        skillsArray.put(skill);
                    }
                }

                JSONObject skillObject = new JSONObject();
                skillObject.put("skills", skillsArray);

                String professionalSkills_json = skillObject.toString();

                userBadges.setProfessionalSkills_json(professionalSkills_json);
                System.out.println("MAINACTIVITY JSONPARSING: " + professionalSkills_json);
            }

            if(userPermissions.getMusic() == 1){
                //Create JSON array to store the music items
                JSONArray musicArray = new JSONArray();

                //Get the items from the response JSONArray and add it to our custom json array
                JSONObject musicObject = json.getJSONObject("music");
                JSONArray data = musicObject.getJSONArray("data");

                for (int i = 0; i < data.length(); i++) {
                    JSONObject jsonobject = data.getJSONObject(i);
                    String name = jsonobject.getString("name");

                    musicArray.put(name);
                }

                musicObject = new JSONObject();
                musicObject.put("music", musicArray);

                String music_json = musicObject.toString();

                userBadges.setMusic_json(music_json);
                System.out.println("MAINACTIVITY JSONPARSING: " + music_json);
            }

            if(userPermissions.getMovies() == 1){
                //Create JSON array to store the movie items
                JSONArray moviesArray = new JSONArray();

                //Get the items from the response JSONArray and add it to our custom json array
                JSONObject movieObject = json.getJSONObject("movies");
                JSONArray data = movieObject.getJSONArray("data");

                for (int i = 0; i < data.length(); i++) {
                    JSONObject jsonobject = data.getJSONObject(i);
                    String name = jsonobject.getString("name");

                    moviesArray.put(name);
                }

                movieObject = new JSONObject();
                movieObject.put("movies", moviesArray);

                String movies_json = movieObject.toString();

                userBadges.setMovies_json(movies_json);
                System.out.println("MAINACTIVITY JSONPARSING: " + movies_json);
            }

            if(userPermissions.getBooks() == 1){
                //Create JSON array to store the book items
                JSONArray booksArray = new JSONArray();

                //Get the items from the response JSONArray and add it to our custom json array
                JSONObject bookObject = json.getJSONObject("books");
                JSONArray data = bookObject.getJSONArray("data");

                for (int i = 0; i < data.length(); i++) {
                    JSONObject jsonobject = data.getJSONObject(i);
                    String name = jsonobject.getString("name");

                    booksArray.put(name);
                }

                bookObject = new JSONObject();
                bookObject.put("books", booksArray);

                String books_json = bookObject.toString();

                userBadges.setBooks_json(books_json);
                System.out.println("MAINACTIVITY JSONPARSING: " + books_json);
            }
//            userName = json.getString("name");
//            userImageUrl = json.getJSONObject("picture")
//                    .getJSONObject("data")
//                    .getString("url");
        } catch (final JSONException jsonException) {
            Log.e("LOGTAG",
                    "Unable to get Facebook user info. " + jsonException.getMessage() + "\n" + response,
                    jsonException);
            // Nothing much we can do here.
        }

        /** Push userBadges item to server **/
        new SaveUserBadgesToDB(dialog).execute();
    }


    public class SaveUserBadgesToDB extends AsyncTask<Void, Void, Void> {
        ProgressDialog dialog;

        public SaveUserBadgesToDB(ProgressDialog dialog) {
            this.dialog = dialog;
        }

        @Override
        protected Void doInBackground(Void... params) {
            try{
                mapper.save(userBadges);
            } catch (AmazonClientException ex){
                ex.printStackTrace();
            }

            return null;
        }

        @Override
        protected void onPostExecute(Void aVoid) {
            super.onPostExecute(aVoid);
            Toast.makeText(MainActivity.this, "Successfully saved user's badges to db", Toast.LENGTH_SHORT).show();
            getBasicUserVariablesFromResponse(response, dialog);
        }
    }


    /** Gets the variables set by the user's privacy preferences needed for the badge class **/
    public void getBasicUserVariablesFromResponse(GraphResponse response, ProgressDialog dialog){
        userProfile = new User_Profile();

        //Get json object from response
        JSONObject json = response.getJSONObject();

        try {
            /** Get the variables **/
            //Get name
            String name = json.getString("name");
            String firstAndLastNAme[] = name.split(" ");
            String firstName = firstAndLastNAme[0];
            String lastName = firstAndLastNAme[1];
            //Get age
            JSONObject ageRangeObject = json.getJSONObject("age_range");
            String age = ageRangeObject.getString("min");
            //Get email
            String email = json.getString("email");

            /** Set the variables **/
            userProfile.setFacebookId(facebookId); //Set facebookId
            userProfile.setFirstName(firstName); //Set first name
            userProfile.setLastName(lastName); //Set last name
            userProfile.setAge(age); //Set Age
            userProfile.setEmail(email); //Set email
        } catch (JSONException e) {
            e.printStackTrace();
        }

        /** Push userInfo item to server **/
        new SaveBasicInfoToDB(dialog).execute();
    }

    public class SaveBasicInfoToDB extends AsyncTask<Void, Void, Void> {
        ProgressDialog dialog;

        public SaveBasicInfoToDB(ProgressDialog dialog) {
            this.dialog = dialog;
        }

        @Override
        protected Void doInBackground(Void... params) {
            try{
                mapper.save(userProfile);
            } catch (AmazonClientException ex){
                ex.printStackTrace();
            }

            return null;
        }

        @Override
        protected void onPostExecute(Void aVoid) {
            super.onPostExecute(aVoid);
            Toast.makeText(MainActivity.this, "Successfully saved user's info to db", Toast.LENGTH_SHORT).show();
            updateUI(dialog);
        }

    }


    /** Anything on the ui thread that needs changing after sync gets updated here **/
    private void updateUI(final ProgressDialog dialog) {
        this.runOnUiThread(new Runnable() {
            @Override
            public void run() {
                if (dialog != null) {
                    dialog.dismiss();
                }

                /**Initialize view item variables*/
                initializeViewItems();

                /**Create the pull out Sliding menu*/
                createMenuDrawer();

                /**Set up the ViewPager and PagerAdapter*/
                setUpViewPager();

                /**Set up the SlidingTabStrip*/
                initializeSlidingTabStrip();

                /**Create top toolbar/menu bar*/
                setUpToolBar();

                /**Get rid of the default arrow image*/
                removeDefaultMenuButton();

                /**Bind the Page indicator to the adapter*/
                setUpPageIndicator();

                isCreated = true;

                theMapOnCreateMethod();
                theMapOnStartMethod();
                theMapOnResumeMethod();
            }
        });
    }


    /** Divides json response from facebook info down into 5 lines to be printed **/
    private void printJsonResponse(JSONObject json) {
        int maxLogSize = 1000;
        for(int i = 0; i <= json.toString().length() / maxLogSize; i++) {
            int start = i * maxLogSize;
            int end = (i+1) * maxLogSize;
            end = end > json.toString().length() ? json.toString().length() : end;
            Log.d("MAINACTIVITY FB:  ", json.toString().substring(start, end));
        }
    }

    //Create the pull out Sliding menu
    private void createMenuDrawer() {
        if(slidingMenu == null){
            System.out.println("MAINACTIVITY: createMenuDrawer");

            slidingMenu = new SlidingMenu(MainActivity.this);
            slidingMenu.attachToActivity(MainActivity.this, SlidingMenu.SLIDING_CONTENT, true);
            slidingMenu.setFadeDegree(0f);
            slidingMenu.setTouchModeAbove(SlidingMenu.TOUCHMODE_MARGIN);
            slidingMenu.setBehindOffsetRes(R.dimen.behindOffSetRes);
            slidingMenu.setMenu(R.layout.sliding_menu_frame);

            View view = slidingMenu.getRootView();

            TextView viewingYou = (TextView) view.findViewById(R.id.viewing_you_text);
            TextView version = (TextView) view.findViewById(R.id.version);
            TextView year = (TextView) view.findViewById(R.id.year);
            ImageView settingsButton = (ImageView) view.findViewById(R.id.settingsButton);
            settingsButton.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    settings();
                }
            });

            Button logoutButton = (Button) view.findViewById(R.id.logout_Button);
            logoutButton.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    logout();
                }
            });

            Button blankActivityButton = (Button) view.findViewById(R.id.blankActivity_Button);
            blankActivityButton.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    blankActivity();
                }
            });

            viewingYou.setTypeface(typeface);
            version.setTypeface(typeface);
            year.setTypeface(typeface);
        }
    }

    //Method to go to user settings
    public void settings() {
        System.out.println("MAINACTIVITY: settings");

        slidingMenu.toggle();
        Intent intent = new Intent(this, SettingsActivity.class);
        startActivity(intent);
    }

    public void logout(){
        identityManager.signOut();
        Intent intent = new Intent(MainActivity.this, SignInActivity.class);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
        startActivity(intent);
        this.finish();
    }

    public void blankActivity(){
        identityManager.signOut();
        Intent intent = new Intent(MainActivity.this, BlankActivity.class);
        startActivity(intent);
        this.finish();
    }

    //Initialize some needed variables
    private void setUpNeededVariables() {
        System.out.println("MAINACTIVITY: setUpNeededVariables");
        facebookId = identityManager.getUserFacebookId();
        context = getApplicationContext();
        egoMap = new EgoMap(MainActivity.this, identityManager, mapper);
        resources = getResources();
        typeface = Typeface.createFromAsset(getAssets(), "fonts/ChaletNewYorkNineteenEighty.ttf");

        /**Initialize dimension variables for the animations*/
        mMinHeaderHeight = getResources().getDimensionPixelSize(R.dimen.min_header_height);
        mHeaderHeight = getResources().getDimensionPixelSize(R.dimen.header_height);
        mMinHeaderTranslation = -mMinHeaderHeight + getActionBarHeight();
    }

    //Initialize view item variables
    private void initializeViewItems(){
        System.out.println("MAINACTIVITY: initializeViewItems");

        mHeader = findViewById(R.id.header); /**ENTIRE HEADER**/
        home_menu_image = (ImageView) findViewById(R.id.toolbar_icon); /**HEADER - HOME MENU IMAGE**/
        home_menu_image2 = (ImageView) findViewById(R.id.toolbar_icon2); /**HEADER - HOME MENU IMAGE**/
        mHeaderPicture = (ImageView) findViewById(R.id.header_picture); /**HEADER - BLURRED BACKGROUND**/

        egoLogo = (ImageView) findViewById(R.id.ego_logo); /**HEADER - PROFILE PICTURE**/
        toolbarTitle = (TextView) findViewById(R.id.toolbar_title);
    }

    //Method for header animation
    public int getActionBarHeight() {
        System.out.println("MAINACTIVITY: getActionBarHeight");

        if (mActionBarHeight != 0) {
            return mActionBarHeight;
        }
        getTheme().resolveAttribute(android.R.attr.actionBarSize, mTypedValue, true);
        mActionBarHeight = TypedValue.complexToDimensionPixelSize(mTypedValue.data, getResources().getDisplayMetrics());
        return mActionBarHeight;
    }

    //Set up the SlidingTabStrip
    private void initializeSlidingTabStrip() {
        System.out.println("MAINACTIVITY: initializeSlidingTabStrip");

        mPagerSlidingTabStrip = (PagerSlidingTabStrip) findViewById(R.id.tabs);
        mPagerSlidingTabStrip.setViewPager(mViewPager);
        mPagerSlidingTabStrip.getTabBackground();
        mPagerSlidingTabStrip.setOnPageChangeListener(this);
        mAlphaForegroundColorSpan = new AlphaForegroundColorSpan(0xffffffff);
    }

    //Using custom image view as home as up indicator, this gets rid of the default arrow image
    private void removeDefaultMenuButton(){
        System.out.println("MAINACTIVITY: removeDefaultMenuButton");

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            upArrow = getDrawable(R.drawable.back_arrow_transparent);
        } else {
            upArrow = getResources().getDrawable(R.drawable.back_arrow_transparent);
        }
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            upArrow.setColorFilter(getColor(R.color.transparentBackground), PorterDuff.Mode.SRC_ATOP);
        }
        getSupportActionBar().setHomeAsUpIndicator(upArrow);
    }

    //Method to detect the scroll value of the Y axis
    public int getScrollY(AbsListView view) {
        System.out.println("MAINACTIVITY: getScrollY");

        View c = view.getChildAt(0);
        if (c == null) {
            return 0;
        }
        int firstVisiblePosition = view.getFirstVisiblePosition();
        int top = c.getTop();
        int headerHeight = 0;
        if (firstVisiblePosition >= 1) {
            headerHeight = mHeaderHeight;
        }
        return -top + firstVisiblePosition * c.getHeight() + headerHeight;
    }

    //Method for header animation
    public static float clamp(float value, float max, float min) {
        System.out.println("MAINACTIVITY: clamp");

        return Math.max(Math.min(value, min), max);
    }

    //Method to animate the title fade in/out
    private static void setTitleAlpha(float alpha) {
        System.out.println("MAINACTIVITY: setTitleAlpha");

//        mAlphaForegroundColorSpan.setAlpha(alpha);
//        mSpannableString.setSpan(mAlphaForegroundColorSpan, 0, mSpannableString.length(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
        toolbar.setTitle(" ");
//        egoLogo.setAlpha(alpha * 1);
    }

    //Method to animate the homeAsUp indicator fade in/out
    private static void setHomeAsUpAlpha(float alpha) {
        System.out.println("MAINACTIVITY: setHomeAsUpAlpha");

        toolbar.setAlpha(alpha * 1);
        egoLogo.setAlpha(alpha * 1);
        pageIndicator.setAlpha(alpha * 1);
        mHeader.setAlpha(alpha * 1);
    }

    private final BroadcastReceiver settingsChangedReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            Log.d(LOG_TAG, "Received settings changed local broadcast. Update theme colors.");
            syncPrivacySettings();
        }
    };


    @Override
    protected void onPause() {
        System.out.println("MAINACTIVITY: onPause");

        super.onPause();
        Log.d("ACT DEBUG", "MainActivity: OnPause");
        // Obtain a reference to the mobile client.
        final AWSMobileClient awsMobileClient = AWSMobileClient.defaultMobileClient();

        // pause/resume Mobile Analytics collection
        awsMobileClient.handleOnPause();

        egoMap.theOnPauseMethod();
        // unregister notification receiver
//        LocalBroadcastManager.getInstance(this).unregisterReceiver(notificationReceiver);
//        LocalBroadcastManager.getInstance(this).unregisterReceiver(settingsChangedReceiver);
    }

    @Override
    protected void onResume() {
        System.out.println("MAINACTIVITY: onResume");

        super.onResume();
        Log.d("ACT DEBUG", "MainActivity: OnResume");
        mHeaderPicture = (ImageView) findViewById(R.id.header_picture); /**HEADER - BLURRED BACKGROUND**/


        final AWSMobileClient awsMobileClient = AWSMobileClient.defaultMobileClient();

        // pause/resume Mobile Analytics collection
        awsMobileClient.handleOnResume();

        // register notification receiver
//        LocalBroadcastManager.getInstance(this).registerReceiver(notificationReceiver,
//                new IntentFilter(PushListenerService.ACTION_SNS_NOTIFICATION));
//        // register settings changed receiver.
        LocalBroadcastManager.getInstance(this).registerReceiver(settingsChangedReceiver,
                new IntentFilter(UserPermissions.ACTION_PERMISSIONS_CHANGED));


        if(isCreated){
            theMapOnCreateMethod();
            theMapOnStartMethod();
            theMapOnResumeMethod();
        }
    }

    @Override
    protected void onStart() {
        System.out.println("MAINACTIVITY: onStart");

        super.onStart();
        Log.d("ACT DEBUG", "MainActivity: OnStart");
        mHeaderPicture = (ImageView) findViewById(R.id.header_picture);


    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        System.out.println("MAINACTIVITY: onCreateOptionsMenu");

//		return super.onCreateOptionsMenu(menu);
        getMenuInflater().inflate(R.menu.menu_main1, menu);
        return true;
    }

    /************************************** IMPLEMENTED METHODS ************************************/
    /***********************************************************************************************/

    @Override
    public void onClick(final View v) {
        System.out.println("MAINACTIVITY: onClick");

        switch(v.getId()){
            case R.id.toolbar:
                absListView.post(new Runnable() {
                    @Override
                    public void run() {
                        absListView.smoothScrollToPosition(0);
                    }
                });
                Toast.makeText(this, "toolbar clicked mainActivity", Toast.LENGTH_SHORT).show();
                break;
        }

    }

    public static void backToTop(){
        System.out.println("MAINACTIVITY: backToTop");

        absListView.post(new Runnable() {
            @Override
            public void run() {
                absListView.smoothScrollToPosition(0);

            }
        });
    }

    @Override
    public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {

    }

    @Override
    public void onPageSelected(int position) {
        System.out.println("MAINACTIVITY: onPageSelected");
        SparseArrayCompat<ScrollTabHolder> scrollTabHolders = mPagerAdapter.getScrollTabHolders();
        ScrollTabHolder currentHolder = scrollTabHolders.valueAt(position);

        currentHolder.adjustScroll((int) (mHeader.getHeight() + mHeader.getTranslationY()));

    }

    @Override
    public void onPageScrollStateChanged(int state) {

    }

    @Override
    public void adjustScroll(int scrollHeight) {

    }

    @Override
    public boolean onOptionsItemSelected(final MenuItem item) {
        System.out.println("MAINACTIVITY: onOptionsItemSelected");

        // Handle action bar item clicks here excluding the home button.
        switch (item.getItemId()) {
            case android.R.id.home:
                slidingMenu.toggle();
                return true;
        }

        return super.onOptionsItemSelected(item);
    }

    @Override
    public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount, int pagePosition) {
        if (mViewPager.getCurrentItem() == pagePosition) {
            absListView = view;
            int scrollY = getScrollY(view);

            mHeader.setTranslationY(Math.max(-scrollY, mMinHeaderTranslation));
            float ratio = clamp(mHeader.getTranslationY() / mMinHeaderTranslation, 0.0f, 1.0f);

//            interpolate(egoLogo, getHomeMenuImageIconView(), sSmoothInterpolator.getInterpolation(ratio));
            setTitleAlpha(clamp(5.0F * ratio - 4.0F, 0.0F, 1.0F));
            setHomeAsUpAlpha(clamp((5.0F * ratio - 4.0F) * -1, 0.0F, 1.0F));
        }
    }


    /************************************** INNER CLASSES ******************************************/
    /***********************************************************************************************/

//    //A Pager adapter that represents 2 ScreenSlidePageFragment objects, in sequence.
//    public class ScreenSlidePagerAdapter extends FragmentPagerAdapter {
//        int count = 0;
//        public ScreenSlidePagerAdapter(FragmentManager fm) {
//            super(fm);
//        }
//
//        //        What happens when page is swiped?
//        @Override
//        public Fragment getItem(int position) {
//            switch(position){
//                case 1:
//                    egoFriendsFragment = new EgoFriendsFragment();
//                    return egoFriendsFragment;
//                default: break;
//            }
//            egoStreamFragment = new EgoStreamFragment();
//            return egoStreamFragment;
//        }
//
//        @Override
//        public int getCount() {
//            return 2;
//        }
//    }

    //PagerAdapter for the sliding pages under user profile
    public class PagerAdapter extends FragmentPagerAdapter {


        private SparseArrayCompat<ScrollTabHolder> mScrollTabHolders;
        private final String[] TITLES = {" ", " "};
//        private final String[] TITLES = {" "};

        private ScrollTabHolder mListener;

        public PagerAdapter(FragmentManager fm) {
            super(fm);
            mScrollTabHolders = new SparseArrayCompat<ScrollTabHolder>();
        }

        public void setTabHolderScrollingContent(ScrollTabHolder listener) {
            mListener = listener;
        }

        @Override
        public CharSequence getPageTitle(int position) {
            return TITLES[position];
        }


        @Override
        public int getCount() {
            return TITLES.length;
        }


        @Override
        public Fragment getItem(int position) {
            if(position == 0){
                fragment = (ScrollTabHolderFragment) Fragment_Main.newInstance(MainActivity.this, context, position, toolbar, friends_Ids);
            } else {
                fragment = (ScrollTabHolderFragment) Fragment_Main_Friends.newInstance(position, toolbar, friends_Ids);
            }


            mScrollTabHolders.put(position, fragment);
            if (mListener != null) {
                fragment.setScrollTabHolder(mListener);

            }

            return fragment;

        }

        public SparseArrayCompat<ScrollTabHolder> getScrollTabHolders() {
            return mScrollTabHolders;
        }

    }










    /************************************** FINAL METHODS ******************************************/
    /***********************************************************************************************/

//    private final BroadcastReceiver notificationReceiver = new BroadcastReceiver() {
//        @Override
//        public void onReceive(Context context, Intent intent) {
//            Log.d(LOG_TAG, "Received notification from local broadcast. Display it in a dialog.");
//
//            Bundle data = intent.getBundleExtra(PushListenerService.INTENT_SNS_NOTIFICATION_DATA);
//            String message = PushListenerService.getMessage(data);
//
//            new AlertDialog.Builder(MainActivity.this)
//                    .setTitle(R.string.push_demo_title)
//                    .setMessage(message)
//                    .setPositiveButton(android.R.string.ok, null)
//                    .show();
//        }
//    };
//
//    private final BroadcastReceiver settingsChangedReceiver = new BroadcastReceiver() {
//        @Override
//        public void onReceive(Context context, Intent intent) {
//            Log.d(LOG_TAG, "Received settings changed local broadcast. Update theme colors.");
////            updateColor();
//        }
//    };
    /***********************************************************************************************/

    /********************************** Google Maps Methods ****************************************/
    /***********************************************************************************************/
    public void theMapOnCreateMethod(){
        System.out.println("MAINACTIVITY: theMapOnCreateMethod");

        egoMap.theOnCreateMethod();
    }

    public void theMapOnStartMethod(){
        System.out.println("MAINACTIVITY: theMapOnStartMethod");
        egoMap.theOnStartMethod();
    }

    @Nullable
    @Override
    public CharSequence onCreateDescription() {
        return super.onCreateDescription();
    }

    public void theMapOnResumeMethod(){
        System.out.println("MAINACTIVITY: theMapOnResumeMethod");
        egoMap.theOnResumeMethod();
    }

    public static void getNearbyUsers(int count){
        System.out.println("MAINACTIVITY: getNearbyUsers");
        egoMap.PushLocation(count);
    }










    /***********************************************************************************************/

    //     public class SaveToDB extends AsyncTask<Void, Void, Void> {
//
//
//        @Override
//        protected Void doInBackground(Void... params) {
//            try{
//                mapper.save(bookToSave);
//            } catch (AmazonClientException ex){
//                ex.printStackTrace();
//            }
//
//            return null;
//        }
//
//        @Override
//        protected void onPostExecute(Void aVoid) {
//            super.onPostExecute(aVoid);
//            Toast.makeText(getActivity(), "Successfully saved book to db", Toast.LENGTH_SHORT).show();
//        }
//    }
}
