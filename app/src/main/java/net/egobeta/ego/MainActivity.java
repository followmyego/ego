//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-android v0.7
//
package net.egobeta.ego;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.content.res.Resources;

import android.graphics.Color;
import android.graphics.PorterDuff;
import android.graphics.RectF;
import android.graphics.Typeface;

import android.graphics.drawable.Drawable;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.content.LocalBroadcastManager;
import android.support.v4.util.SparseArrayCompat;
import android.support.v4.view.ViewPager;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.util.TypedValue;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AbsListView;



import net.amazonaws.mobile.AWSMobileClient;
import net.amazonaws.mobile.user.IdentityManager;
import net.astuetz.PagerSlidingTabStrip;
//import net.egobeta.ego.databinding.FragmentListBinding;
import net.egobeta.ego.Fragments.Fragment_Main;
import net.egobeta.ego.Fragments.Fragment_Main_Friends;
import net.egobeta.ego.Fragments.ScrollTabHolderFragment;
import net.egobeta.ego.Interfaces.ScrollTabHolder;
import net.egobeta.ego.OnBoarding.Main_OnBoarding;
import net.egobeta.ego.Settings.SettingsActivity;
import net.egobeta.ego.demo.UserSettings;
import net.egobeta.ego.demo.nosql.UserLocation;
import net.flavienlaurent.notboringactionbar.AlphaForegroundColorSpan;

import com.amazonaws.AmazonClientException;
import com.amazonaws.mobileconnectors.cognito.Dataset;
import com.amazonaws.mobileconnectors.cognito.DefaultSyncCallback;
import com.amazonaws.mobileconnectors.cognito.Record;
import com.amazonaws.mobileconnectors.cognito.SyncConflict;
import com.amazonaws.mobileconnectors.cognito.exceptions.DataStorageException;
import com.amazonaws.mobileconnectors.dynamodbv2.dynamodbmapper.DynamoDBMapper;
import com.jeremyfeinstein.slidingmenu.lib.SlidingMenu;
import com.viewpagerindicator.CirclePageIndicator;


import android.app.AlertDialog;
import android.content.IntentFilter;
import android.content.BroadcastReceiver;
import android.widget.ImageView;
import android.widget.ScrollView;
import android.widget.TextView;
import android.widget.Toast;


import java.util.List;

public class MainActivity extends AppCompatActivity implements ScrollTabHolder, ViewPager.OnPageChangeListener, View.OnClickListener {

    //AWS Variables
    AWSMobileClient awsMobileClient = null;
    static DynamoDBMapper mapper = null;
    public static IdentityManager identityManager = null; //The identity manager used to keep track of the current user account.


    //Other variables
    private final static String LOG_TAG = MainActivity.class.getSimpleName(); //Class name for log messages.
    Typeface typeface;
    private TypedValue mTypedValue = new TypedValue();
    private PagerAdapter mPagerAdapter = null; //The pager adapter, which provides the pages to the view pager widget.
    ScrollTabHolderFragment fragment = null;

    private Resources resources;
    static Context context;
    private static AlphaForegroundColorSpan mAlphaForegroundColorSpan;
    static EgoMap egoMap = null;

    @Override
    protected void onDestroy() {
        super.onDestroy();
        Log.d("ACT DEBUG", "MainActivity: OnDestroy");
        android.os.Process.killProcess(android.os.Process.myPid());
    }

    static UserLocation userLocation = null;
    public static Activity activity = null;
//    static EgoStreamViewAdapter2 adapter;

    //Number Variables
    private static int mMinHeaderTranslation;
    private int mActionBarHeight;
    public int mMinHeaderHeight;
    private int mHeaderHeight;
    private static RectF mRect1 = new RectF();
    private static RectF mRect2 = new RectF();

    //View item variables
    private static View mHeader;
    private static ImageView home_menu_image;
    private static ImageView home_menu_image2;
    private ImageView mHeaderPicture;
    public Drawable upArrow;
    public static ImageView egoLogo;
    public static ScrollView scrollView;
    private SlidingMenu slidingMenu;
    private ViewPager mViewPager = null;
    private static Toolbar toolbar;
    public PagerSlidingTabStrip mPagerSlidingTabStrip;
    private static TextView toolbarTitle;
    private static AbsListView absListView;
    static CirclePageIndicator pageIndicator;

    static String[] facebookIds = {"699211431"};




//    /** The toolbar view control. */
//    private Toolbar toolbar = null;
//
//    /** Our navigation drawer class for handling navigation drawer logic. */
//    private NavigationDrawer navigationDrawer;
//
//    /** The helper class used to toggle the left navigation drawer open and closed. */
//    private ActionBarDrawerToggle drawerToggle;
//    /**
//     * Initializes the sign-in and sign-out buttons.
//     */
//    private void setupSignInButtons() {
//
//        signOutButton = (Button) findViewById(R.id.button_signout);
//        signOutButton.setOnClickListener(this);
//
//        signInButton = (Button) findViewById(R.id.button_signin);
//        signInButton.setOnClickListener(this);
//
//        final boolean isUserSignedIn = identityManager.isUserSignedIn();
//        signOutButton.setVisibility(isUserSignedIn ? View.VISIBLE : View.INVISIBLE);
//        signInButton.setVisibility(!isUserSignedIn ? View.VISIBLE : View.INVISIBLE);
//
//    }

//    /**
//     * Initializes the navigation drawer menu to allow toggling via the toolbar or swipe from the
//     * side of the screen.
//     */
//    private void setupNavigationMenu(final Bundle savedInstanceState) {
//        final DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
//        final ListView drawerItems = (ListView) findViewById(R.id.nav_drawer_items);
//
//        // Create the navigation drawer.
//        navigationDrawer = new NavigationDrawer(this, drawerLayout, drawerItems,
//            R.id.main_fragment_container);
//
//        // Add navigation drawer menu items.
//        // Home isn't a demo, but is fake as a demo.
//        DemoConfiguration.DemoFeature home = new DemoConfiguration.DemoFeature();
//        home.iconResId = R.mipmap.icon_home;
//        home.titleResId = R.string.main_nav_menu_item_home;
//        navigationDrawer.addDemoFeatureToMenu(home);
//
//        for (DemoConfiguration.DemoFeature demoFeature : DemoConfiguration.getDemoFeatureList()) {
//            navigationDrawer.addDemoFeatureToMenu(demoFeature);
//        }
//        setupSignInButtons();
//
//        if (savedInstanceState == null) {
//            // Add the home fragment to be displayed initially.
//            navigationDrawer.showHome();
//        }
//    }


    @Override
    protected void onCreate(final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        Log.d("ACT DEBUG", "MainActivity: OnCreate");
        System.out.println("MAINACTIVITY: onCreate");
        activity = this;
        /** AWS Stuffs **/
        // Obtain a reference to the mobile client. It is created in the Application class,
        // but in case a custom Application class is not used, we initialize it here if necessary.
        AWSMobileClient.initializeMobileClientIfNecessary(this);
        // Obtain a reference to the mobile client. It is created in the Application class.
        awsMobileClient = AWSMobileClient.defaultMobileClient();
        // Obtain a reference to the identity manager.
        identityManager = awsMobileClient.getIdentityManager();

        //Initialize the mapper for DynamoDB
        mapper = AWSMobileClient.defaultMobileClient().getDynamoDBMapper();
        syncUserSettings();
        /****************/
        setContentView(R.layout.activity_main);
        context = getApplicationContext();



//        adapter = new EgoStreamViewAdapter2(this, facebookIds);
        egoMap = new EgoMap(MainActivity.this, identityManager, mapper);

        resources = getResources();

        /**Initialize font*/
        typeface = Typeface.createFromAsset(getAssets(), "fonts/ChaletNewYorkNineteenEighty.ttf");

        /**Initialize dimension variables for the animations*/
        initializeDimensionItems();

        /**Initialize view item variables*/
        initializeViewItems();

        /**Create the pull out Sliding menu*/
        if(slidingMenu == null){
            createMenuDrawer();
        }

        /**Set up the ViewPager and PagerAdapter*/
        mViewPager = (ViewPager) findViewById(R.id.pager);
        mViewPager.setOffscreenPageLimit(3);
        mPagerAdapter = new PagerAdapter(getSupportFragmentManager());
        mPagerAdapter.setTabHolderScrollingContent(this);
        mViewPager.setAdapter(mPagerAdapter);

        /**Set up the SlidingTabStrip*/
        initializeSlidingTabStrip();



        /**Create top toolbar/menu bar*/
        toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        assert getSupportActionBar() != null;
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        toolbar.setOnClickListener(this);

        /**Get rid of the default arrow image*/
        removeDefaultMenuButton();


        /*Bind the Page indicator to the adapter*/
        pageIndicator = (CirclePageIndicator)findViewById(R.id.titles);
        int tabPageColor = Color.parseColor("#5055C1AD");
        int tabFillColor = Color.parseColor("#55C1AD");
        pageIndicator.setStrokeColor(tabPageColor);
        pageIndicator.setFillColor(tabFillColor);
        pageIndicator.setPageColor(tabPageColor);
        pageIndicator.setExtraSpacing(15f);
        pageIndicator.setViewPager(mViewPager);


        //Fire the ego map on create method


        //GetThe first batch of nearby users
//        getNearbyUsers(0);
    }








    /**Created from the AWS demo app**/
    /** Sync user's preferences only if user is signed in **/
    private void syncUserSettings() {
        System.out.println("MAINACTIVITY: syncUserSettings");
        // sync only if user is signed in
        if (AWSMobileClient.defaultMobileClient().getIdentityManager().isUserSignedIn()) {
            final UserSettings userSettings = UserSettings.getInstance(getApplicationContext());
            userSettings.getDataset().synchronize(new DefaultSyncCallback() {
                @Override
                public void onSuccess(final Dataset dataset, final List<Record> updatedRecords) {
                    super.onSuccess(dataset, updatedRecords);
                    Log.d(LOG_TAG, "successfully synced user settings");

                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            loadUserSettings();

                        }
                    });


                    //If firstTimeUser = 0
                    // go to OnBoardingActivity
                    //else
                    // stay on current activity and

                }
            });
        }
    }

    private void loadUserSettings() {
        System.out.println("MAINACTIVITY: loadUserSettings");
        final UserSettings userSettings = UserSettings.getInstance(context);
        final Dataset dataset = userSettings.getDataset();
        final ProgressDialog dialog = ProgressDialog.show(activity,
                getString(R.string.settings_fragment_dialog_title),
                getString(R.string.settings_fragment_dialog_message));
        Log.d(LOG_TAG, "Loading user settings from remote");
        dataset.synchronize(new DefaultSyncCallback() {
            @Override
            public void onSuccess(final Dataset dataset, final List<Record> updatedRecords) {
                super.onSuccess(dataset, updatedRecords);
                userSettings.loadFromDataset();
                if (userSettings.getNewUser() == 0) {
                    updateUI(dialog, 0);
                } else {
                    updateUI(dialog, 1);
                }
                ;
            }

            @Override
            public void onFailure(final DataStorageException dse) {
                Log.w(LOG_TAG, "Failed to load user settings from remote, using default.", dse);
                updateUI(dialog, 3);
            }

            @Override
            public boolean onDatasetsMerged(final Dataset dataset,
                                            final List<String> datasetNames) {
                // Handle dataset merge. One can selectively copy records from merged datasets
                // if needed. Here, simply discard merged datasets
                for (String name : datasetNames) {
                    Log.d(LOG_TAG, "found merged datasets: " + name);
                    AWSMobileClient.defaultMobileClient().getSyncManager().openOrCreateDataset(name).delete();
                }
                return true;
            }
        });
    }

    private void updateUI(final ProgressDialog dialog, final int isFirstTimeUSer) {
        System.out.println("MAINACTIVITY: updateUI");
        activity.runOnUiThread(new Runnable() {
            @Override
            public void run() {
                if (dialog != null) {
                    dialog.dismiss();
                }
                if (isFirstTimeUSer == 1) {
                    Toast.makeText(activity, "not FirstTimeUser", Toast.LENGTH_SHORT).show();
                    setFirstTimeUser(isFirstTimeUSer);
                } else if (isFirstTimeUSer == 0) {
                    Toast.makeText(activity, "FirstTimeUser", Toast.LENGTH_SHORT).show();
                    setFirstTimeUser(isFirstTimeUSer);
//                    Intent intent = new Intent(MainActivity.this, Main_OnBoarding.class);
//                    startActivity(intent);
//                    MainActivity.this.finish();
                } else {
                    Toast.makeText(activity, "Failure updating", Toast.LENGTH_SHORT).show();
                    setFirstTimeUser(0);
                }

            }
        });
    }

    private void setFirstTimeUser(int firstTime) {
        System.out.println("MAINACTIVITY: setFirstTimeUser");
        final UserSettings userSettings = UserSettings.getInstance(context);
        userSettings.setNewUser(firstTime);

        new AsyncTask<Void, Void, Void>() {
            @Override
            protected Void doInBackground(final Void... params) {
                userSettings.saveToDataset();
                return null;
            }

            @Override
            protected void onPostExecute(final Void aVoid) {

                // update color
//                ((MainActivity) getActivity()).updateColor();

                // save user settings to remote on background thread
                userSettings.getDataset().synchronize(new Dataset.SyncCallback() {
                    @Override
                    public void onSuccess(Dataset dataset, List<Record> updatedRecords) {
                        Log.d(LOG_TAG, "onSuccess - dataset updated");

                    }

                    @Override
                    public boolean onConflict(Dataset dataset, List<SyncConflict> conflicts) {
                        Log.d(LOG_TAG, "onConflict - dataset conflict");
                        return false;
                    }

                    @Override
                    public boolean onDatasetDeleted(Dataset dataset, String datasetName) {
                        Log.d(LOG_TAG, "onDatasetDeleted - dataset deleted");
                        return false;
                    }

                    @Override
                    public boolean onDatasetsMerged(Dataset dataset, List<String> datasetNames) {
                        Log.d(LOG_TAG, "onDatasetsMerged - datasets merged");
                        return false;
                    }

                    @Override
                    public void onFailure(DataStorageException dse) {
                        Log.e(LOG_TAG, "onFailure - " + dse.getMessage(), dse);
                    }
                });
            }
        }.execute();
    }

    /**Created from the AWS demo app**/
    /**Update users preferred colors*/
//    public void updateColor() {
//        final UserSettings userSettings = UserSettings.getInstance(getApplicationContext());
//        new AsyncTask<Void, Void, Void>() {
//            @Override
//            protected Void doInBackground(final Void... params) {
//                userSettings.loadFromDataset();
//                return null;
//            }
//
//            @Override
//            protected void onPostExecute(final Void aVoid) {
//                final Fragment fragment = getSupportFragmentManager().findFragmentById(R.id.addBookButton); //This wont work but it got rid of the error from above this
//                if (fragment != null) {
//                    final View fragmentView = fragment.getView();
//                    if (fragmentView != null) {
//                        fragmentView.setBackgroundColor(userSettings.getBackgroudColor());
//                    }
//                }
//            }
//        }.execute();
//    }



    //Create the pull out Sliding menu
    private void createMenuDrawer() {
        System.out.println("MAINACTIVITY: createMenuDrawer");

        slidingMenu = new SlidingMenu(MainActivity.this);
        slidingMenu.attachToActivity(MainActivity.this, SlidingMenu.SLIDING_CONTENT, true);
        slidingMenu.setFadeDegree(0f);
        slidingMenu.setTouchModeAbove(SlidingMenu.TOUCHMODE_MARGIN);
        slidingMenu.setBehindOffsetRes(R.dimen.behindOffSetRes);
        slidingMenu.setMenu(R.layout.sliding_menu_frame);

        View view = slidingMenu.getRootView();

        TextView viewingYou = (TextView) view.findViewById(R.id.viewing_you_text);
        TextView version = (TextView) view.findViewById(R.id.version);
        TextView year = (TextView) view.findViewById(R.id.year);
        ImageView imageView = (ImageView) view.findViewById(R.id.settingsButton);
        imageView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                settings();
            }
        });

        viewingYou.setTypeface(typeface);
        version.setTypeface(typeface);
        year.setTypeface(typeface);

    }

    //Method to go to user settings
    public void settings() {
        System.out.println("MAINACTIVITY: settings");

        slidingMenu.toggle();
        Intent intent = new Intent(this, SettingsActivity.class);
        startActivity(intent);
//        this.finish();
    }

    //Initialize dimension variables for the animations
    private void initializeDimensionItems() {
        System.out.println("MAINACTIVITY: initializeDimensionItems");

        mMinHeaderHeight = getResources().getDimensionPixelSize(R.dimen.min_header_height);
        mHeaderHeight = getResources().getDimensionPixelSize(R.dimen.header_height);
        mMinHeaderTranslation = -mMinHeaderHeight + getActionBarHeight();
    }

    //Initialize view item variables
    private void initializeViewItems(){
        System.out.println("MAINACTIVITY: initializeViewItems");

        mHeader = findViewById(R.id.header); /**ENTIRE HEADER**/
        home_menu_image = (ImageView) findViewById(R.id.toolbar_icon); /**HEADER - HOME MENU IMAGE**/
        home_menu_image2 = (ImageView) findViewById(R.id.toolbar_icon2); /**HEADER - HOME MENU IMAGE**/
        mHeaderPicture = (ImageView) findViewById(R.id.header_picture); /**HEADER - BLURRED BACKGROUND**/

        egoLogo = (ImageView) findViewById(R.id.ego_logo); /**HEADER - PROFILE PICTURE**/
        toolbarTitle = (TextView) findViewById(R.id.toolbar_title);
    }

    //Method for header animation
    public int getActionBarHeight() {
        System.out.println("MAINACTIVITY: getActionBarHeight");

        if (mActionBarHeight != 0) {
            return mActionBarHeight;
        }
        getTheme().resolveAttribute(android.R.attr.actionBarSize, mTypedValue, true);
        mActionBarHeight = TypedValue.complexToDimensionPixelSize(mTypedValue.data, getResources().getDisplayMetrics());
        return mActionBarHeight;
    }

    //Set up the SlidingTabStrip
    private void initializeSlidingTabStrip() {
        System.out.println("MAINACTIVITY: initializeSlidingTabStrip");

        mPagerSlidingTabStrip = (PagerSlidingTabStrip) findViewById(R.id.tabs);
        mPagerSlidingTabStrip.setViewPager(mViewPager);
        mPagerSlidingTabStrip.getTabBackground();
        mPagerSlidingTabStrip.setOnPageChangeListener(this);
        mAlphaForegroundColorSpan = new AlphaForegroundColorSpan(0xffffffff);
    }

    //Using custom image view as home as up indicator, this gets rid of the default arrow image
    private void removeDefaultMenuButton(){
        System.out.println("MAINACTIVITY: removeDefaultMenuButton");

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            upArrow = getDrawable(R.drawable.back_arrow_transparent);
        } else {
            upArrow = getResources().getDrawable(R.drawable.back_arrow_transparent);
        }
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            upArrow.setColorFilter(getColor(R.color.transparentBackground), PorterDuff.Mode.SRC_ATOP);
        }
        getSupportActionBar().setHomeAsUpIndicator(upArrow);
    }

    //Method to detect the scroll value of the Y axis
    public int getScrollY(AbsListView view) {
        System.out.println("MAINACTIVITY: getScrollY");

        View c = view.getChildAt(0);
        if (c == null) {
            return 0;
        }
        int firstVisiblePosition = view.getFirstVisiblePosition();
        int top = c.getTop();
        int headerHeight = 0;
        if (firstVisiblePosition >= 1) {
            headerHeight = mHeaderHeight;
        }
        return -top + firstVisiblePosition * c.getHeight() + headerHeight;
    }

    //Method for header animation
    public static float clamp(float value, float max, float min) {
        System.out.println("MAINACTIVITY: clamp");

        return Math.max(Math.min(value, min), max);
    }

    //Method to animate the title fade in/out
    private static void setTitleAlpha(float alpha) {
        System.out.println("MAINACTIVITY: setTitleAlpha");

//        mAlphaForegroundColorSpan.setAlpha(alpha);
//        mSpannableString.setSpan(mAlphaForegroundColorSpan, 0, mSpannableString.length(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
        toolbar.setTitle(" ");
//        egoLogo.setAlpha(alpha * 1);
    }

    //Method to animate the homeAsUp indicator fade in/out
    private static void setHomeAsUpAlpha(float alpha) {
        System.out.println("MAINACTIVITY: setHomeAsUpAlpha");

        toolbar.setAlpha(alpha * 1);
        egoLogo.setAlpha(alpha * 1);
        pageIndicator.setAlpha(alpha * 1);
        mHeader.setAlpha(alpha * 1);
    }




    @Override
    protected void onPause() {
        System.out.println("MAINACTIVITY: onPause");

        super.onPause();
        Log.d("ACT DEBUG", "MainActivity: OnPause");
        // Obtain a reference to the mobile client.
        final AWSMobileClient awsMobileClient = AWSMobileClient.defaultMobileClient();

        // pause/resume Mobile Analytics collection
        awsMobileClient.handleOnPause();

        egoMap.theOnPauseMethod();
        // unregister notification receiver
//        LocalBroadcastManager.getInstance(this).unregisterReceiver(notificationReceiver);
//        LocalBroadcastManager.getInstance(this).unregisterReceiver(settingsChangedReceiver);
    }

    @Override
    protected void onResume() {
        System.out.println("MAINACTIVITY: onResume");

        super.onResume();
        Log.d("ACT DEBUG", "MainActivity: OnResume");
        mHeaderPicture = (ImageView) findViewById(R.id.header_picture); /**HEADER - BLURRED BACKGROUND**/


        final AWSMobileClient awsMobileClient = AWSMobileClient.defaultMobileClient();

        // pause/resume Mobile Analytics collection
        awsMobileClient.handleOnResume();

        // register notification receiver
//        LocalBroadcastManager.getInstance(this).registerReceiver(notificationReceiver,
//                new IntentFilter(PushListenerService.ACTION_SNS_NOTIFICATION));
//        // register settings changed receiver.
//        LocalBroadcastManager.getInstance(this).registerReceiver(settingsChangedReceiver,
//                new IntentFilter(UserSettings.ACTION_SETTINGS_CHANGED));
//        updateColor();

//        Sync the user's privacy settings and detect if the user is first time.
//        syncUserSettings();

        theMapOnCreateMethod();
        theMapOnStartMethod();
        theMapOnResumeMethod();
//        getNearbyUsers(0);
    }

    @Override
    protected void onStart() {
        System.out.println("MAINACTIVITY: onStart");

        super.onStart();
        Log.d("ACT DEBUG", "MainActivity: OnStart");
        mHeaderPicture = (ImageView) findViewById(R.id.header_picture);


    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        System.out.println("MAINACTIVITY: onCreateOptionsMenu");

//		return super.onCreateOptionsMenu(menu);
        getMenuInflater().inflate(R.menu.menu_main1, menu);
        return true;
    }

    /************************************** IMPLEMENTED METHODS ************************************/
    /***********************************************************************************************/

    @Override
    public void onClick(final View v) {
        System.out.println("MAINACTIVITY: onClick");

        switch(v.getId()){
            case R.id.toolbar:
                absListView.post(new Runnable() {
                    @Override
                    public void run() {
                        absListView.smoothScrollToPosition(0);
                    }
                });
                Toast.makeText(this, "toolbar clicked mainActivity", Toast.LENGTH_SHORT).show();
                break;
        }

    }

    public static void backToTop(){
        System.out.println("MAINACTIVITY: backToTop");

        absListView.post(new Runnable() {
            @Override
            public void run() {
                absListView.smoothScrollToPosition(0);

            }
        });
    }

    @Override
    public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {

    }

    @Override
    public void onPageSelected(int position) {
        System.out.println("MAINACTIVITY: onPageSelected");
        SparseArrayCompat<ScrollTabHolder> scrollTabHolders = mPagerAdapter.getScrollTabHolders();
        ScrollTabHolder currentHolder = scrollTabHolders.valueAt(position);

        currentHolder.adjustScroll((int) (mHeader.getHeight() + mHeader.getTranslationY()));

    }

    @Override
    public void onPageScrollStateChanged(int state) {

    }

    @Override
    public void adjustScroll(int scrollHeight) {

    }

    @Override
    public boolean onOptionsItemSelected(final MenuItem item) {
        System.out.println("MAINACTIVITY: onOptionsItemSelected");

        // Handle action bar item clicks here excluding the home button.
        switch (item.getItemId()) {
            case android.R.id.home:
                slidingMenu.toggle();
                return true;
        }

        return super.onOptionsItemSelected(item);
    }

    @Override
    public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount, int pagePosition) {
        if (mViewPager.getCurrentItem() == pagePosition) {
            absListView = view;
            int scrollY = getScrollY(view);

            mHeader.setTranslationY(Math.max(-scrollY, mMinHeaderTranslation));
            float ratio = clamp(mHeader.getTranslationY() / mMinHeaderTranslation, 0.0f, 1.0f);

//            interpolate(egoLogo, getHomeMenuImageIconView(), sSmoothInterpolator.getInterpolation(ratio));
            setTitleAlpha(clamp(5.0F * ratio - 4.0F, 0.0F, 1.0F));
            setHomeAsUpAlpha(clamp((5.0F * ratio - 4.0F) * -1, 0.0F, 1.0F));
        }
    }


    /************************************** INNER CLASSES ******************************************/
    /***********************************************************************************************/

//    //A Pager adapter that represents 2 ScreenSlidePageFragment objects, in sequence.
//    public class ScreenSlidePagerAdapter extends FragmentPagerAdapter {
//        int count = 0;
//        public ScreenSlidePagerAdapter(FragmentManager fm) {
//            super(fm);
//        }
//
//        //        What happens when page is swiped?
//        @Override
//        public Fragment getItem(int position) {
//            switch(position){
//                case 1:
//                    egoFriendsFragment = new EgoFriendsFragment();
//                    return egoFriendsFragment;
//                default: break;
//            }
//            egoStreamFragment = new EgoStreamFragment();
//            return egoStreamFragment;
//        }
//
//        @Override
//        public int getCount() {
//            return 2;
//        }
//    }

    //PagerAdapter for the sliding pages under user profile
    public class PagerAdapter extends FragmentPagerAdapter {


        private SparseArrayCompat<ScrollTabHolder> mScrollTabHolders;
        private final String[] TITLES = {" ", " "};
//        private final String[] TITLES = {" "};

        private ScrollTabHolder mListener;

        public PagerAdapter(FragmentManager fm) {
            super(fm);
            mScrollTabHolders = new SparseArrayCompat<ScrollTabHolder>();
        }

        public void setTabHolderScrollingContent(ScrollTabHolder listener) {
            mListener = listener;
        }

        @Override
        public CharSequence getPageTitle(int position) {
            return TITLES[position];
        }


        @Override
        public int getCount() {
            return TITLES.length;
        }


        @Override
        public Fragment getItem(int position) {
            if(position == 0){
                fragment = (ScrollTabHolderFragment) Fragment_Main.newInstance(MainActivity.this, context, position, toolbar);
            } else {
                fragment = (ScrollTabHolderFragment) Fragment_Main_Friends.newInstance(MainActivity.this, context, position, toolbar);
            }


            mScrollTabHolders.put(position, fragment);
            if (mListener != null) {
                fragment.setScrollTabHolder(mListener);

            }

            return fragment;

        }

        public SparseArrayCompat<ScrollTabHolder> getScrollTabHolders() {
            return mScrollTabHolders;
        }

    }










    /************************************** FINAL METHODS ******************************************/
    /***********************************************************************************************/

//    private final BroadcastReceiver notificationReceiver = new BroadcastReceiver() {
//        @Override
//        public void onReceive(Context context, Intent intent) {
//            Log.d(LOG_TAG, "Received notification from local broadcast. Display it in a dialog.");
//
//            Bundle data = intent.getBundleExtra(PushListenerService.INTENT_SNS_NOTIFICATION_DATA);
//            String message = PushListenerService.getMessage(data);
//
//            new AlertDialog.Builder(MainActivity.this)
//                    .setTitle(R.string.push_demo_title)
//                    .setMessage(message)
//                    .setPositiveButton(android.R.string.ok, null)
//                    .show();
//        }
//    };
//
//    private final BroadcastReceiver settingsChangedReceiver = new BroadcastReceiver() {
//        @Override
//        public void onReceive(Context context, Intent intent) {
//            Log.d(LOG_TAG, "Received settings changed local broadcast. Update theme colors.");
////            updateColor();
//        }
//    };
    /***********************************************************************************************/

    /********************************** Google Maps Methods ****************************************/
    /***********************************************************************************************/
    public void theMapOnCreateMethod(){
        System.out.println("MAINACTIVITY: theMapOnCreateMethod");

        egoMap.theOnCreateMethod();
    }

    public void theMapOnStartMethod(){
        System.out.println("MAINACTIVITY: theMapOnStartMethod");
        egoMap.theOnStartMethod();
    }

    public void theMapOnResumeMethod(){
        System.out.println("MAINACTIVITY: theMapOnResumeMethod");
        egoMap.theOnResumeMethod();
    }

    public static void getNearbyUsers(int count){
        System.out.println("MAINACTIVITY: getNearbyUsers");
        egoMap.PushLocation(count);
    }










    /***********************************************************************************************/

    //     public class SaveToDB extends AsyncTask<Void, Void, Void> {
//
//
//        @Override
//        protected Void doInBackground(Void... params) {
//            try{
//                mapper.save(bookToSave);
//            } catch (AmazonClientException ex){
//                ex.printStackTrace();
//            }
//
//            return null;
//        }
//
//        @Override
//        protected void onPostExecute(Void aVoid) {
//            super.onPostExecute(aVoid);
//            Toast.makeText(getActivity(), "Successfully saved book to db", Toast.LENGTH_SHORT).show();
//        }
//    }
}
